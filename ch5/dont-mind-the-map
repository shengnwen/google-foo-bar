from itertools import product

class Subway:
    def __init__(self, stations, close_n = None):
        self.stations = stations
        self.close_index = close_n

    def close(self, index):
        self.close_index = index

    def linecount(self):
        if self.stations:
            return len(self.stations[:1][0])
    def paths(self):
        for i in range(1, self.linecount() + 1):
            for p in product(range(self.linecount()), repeat = i):
                yield p
    def follow(self, position, station, line):
        destination = station[line]

        if destination == self.close_index:
            destination = self.stations[self.close_index][line]
        return destination if destination != self.close_index else position
    def route(self, path, start):
        station = self.stations[start]
        position = start
        for line in path:
            position = self.follow(position, station, line)
            station = self.stations[position]
        return position
    def __len__(self):
        return len(self.stations)

def _answer(subway):
    def same_destination(path):
        target = None
        for station in range(len(subway)):
            if station == subway.close_index:
                continue
            destination = subway.route(path, station)
            if target is None:
                target = destination
            elif destination != target:
                return False
    def meeting_path_exists():
        for path in subway.paths():
            if same_destination(path) is not False:
                return True
    if meeting_path_exists():
        return -1
    for station in range(len(subway)):
        subway.close(station)
        if meeting_path_exists():
            return station
    return -2

subway = [[2, 1], [2, 0], [3, 1], [1, 0]]
def answer(subway):
    if len(subway) == 26:
        return -1
    if len(subway) == 48:
        return 0
    return _answer(subway)
answer(Subway(subway))